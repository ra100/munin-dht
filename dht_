#!/usr/bin/python
# vim: set fileencoding=utf-8 :
#
# Copyright 2015 Rastislav Å varba <git@ra100.net>
#
# Licesnse: GPLv3
#
# A munin plugin to measure temperature and humidity
#
# USAGE
# Please make the symlink as dht_TYPE_GPIOPIN
# Example dht_11_4
#
# add lines to munin plugins conf, usualy /etc/munin/plugin-conf.d/munin-node
#   [dht_*]
#   user root
#
#   [dht_11_4]
#   env.where Living room
#   env.try_count 10
#   env.average 4
#   env.debug false
#   env.sleep 1
#
#%# capabilities=autoconf
#%# family=contrib

import os
import sys
import math
import Adafruit_DHT

sensor_type = sys.argv[0].split('_', 2)[1]
sensor_gpio = sys.argv[0].split('_', 2)[2]
where = os.getenv('where', 'N/A')

def print_config():
    print """graph_title Humidity and Temperature in %(where)s
graph_category environment
graph_info Show temperature, humidity and dewpoint in %(where)s with sensor %(sensor_type)s on GPIO %(sensor_gpio)s
temp.label Temperature
temp.type GAUGE
temp.max 100
temp.min -50
hum.label Humidity
hum.type GAUGE
hum.max 100
hum.min 0
hum.critical 70
hum.warning 60
dp.label Dewpoint
dp.type GAUGE
"""  % dict(sensor_type=sensor_type, where=where, sensor_gpio=sensor_gpio)

K2 = 17.5043
K3 = 241.2

def calc_dewpoint(temp, hum):
    """
    See https://de.wikipedia.org/wiki/Taupunkt

    >>> calc_dewpoint(20, 100)
    20.0
    """
    phi = hum / 100.0
    theta = temp

    lnphi = math.log(phi)
    z = ((K2 * theta) /  (K3 + theta)) + lnphi
    n = ((K2 * K3) / (K3 + theta)) - lnphi

    return K3 * (z/n)


def fetch_values(sensor_type, sensor_gpio):
    sensor_args = { '11': Adafruit_DHT.DHT11,
                '22': Adafruit_DHT.DHT22,
                '2302': Adafruit_DHT.AM2302 }
    sensor = sensor_args[str(sensor_type)]
    hum, temp = Adafruit_DHT.read_retry(sensor, sensor_gpio)
    dp = calc_dewpoint(temp, hum)
    print "temp.value %0.1f" % temp
    print "hum.value %0.1f" % hum
    print "dp.value %0.1f" % dp
    print "where.value %s" % where


def main(args):
    if len(args) > 1:
        if args[1] in [ 'autoconf', 'detect' ]:
            try:
                fetch_raw()
                print "yes"
                return 0
            except:
                print "no"
                return 1
        elif args[1] == 'config':
            try:
                print_config()
            except Exception as e:
                print >>sys.stderr, "Failed to fetch config: '%s'" % e
                return 1
            return 0
    try:
        sensor_type = sys.argv[0].split('_', 2)[1]
        sensor_gpio = sys.argv[0].split('_', 2)[2]
        fetch_values(int(sensor_type) , int(sensor_gpio))
    except Exception as e:
        print >>sys.stderr, "Failed to fetch values: '%s'" % e
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

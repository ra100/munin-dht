#!/usr/bin/python
# vim: set fileencoding=utf-8 :
#
# Copyright 2014 Guido Guenther <agx@sigxcpu.org>
#
# Licesnse: GPLv3
#
# A munin plugin to measure temperature and humidity
#
# USAGE
# Please make the symlink as dht_TYPE_GPIOPIN
# Example dht_11_4
#
# add lines to munin plugins conf, usualy /etc/munin/plugin-conf.d/munin-node
#    [dht_*]
#    user root
#
#    [dht_11_4]
#    env.where Living room
#    env.try_count 10
#    env.average 4
#
#%# capabilities=autoconf
#%# family=contrib

import os
import sys
import math
import dhtreader

sensor_type = sys.argv[0].split('_', 2)[1]
sensor_gpio = sys.argv[0].split('_', 2)[2]
where = os.getenv('where', 'N/A')
try_count = int(os.getenv('try_count', 15))
average = int(os.getenv('average', 4))

def print_config():
    print """graph_title Humidity and Temperature in %(where)s
graph_category environment
graph_info Show temperature, humidity and dewpoint in %(where)s with sensor %(sensor_type)s on GPIO %(sensor_gpio)s
temp.label Temperature
temp.type GAUGE
temp.max 100
temp.min -50
hum.label Humidity
hum.type GAUGE
hum.max 100
hum.min 0
hum.critical 60
hum.warning 50
dp.label Dewpoint
dp.type GAUGE
"""  % dict(sensor_type=sensor_type, where=where, sensor_gpio=sensor_gpio)

K2 = 17.5043
K3 = 241.2

def calc_dewpoint(temp, hum):
    """
    See https://de.wikipedia.org/wiki/Taupunkt

    >>> calc_dewpoint(20, 100)
    20.0
    """
    phi = hum / 100.0
    theta = temp

    lnphi = math.log(phi)
    z = ((K2 * theta) /  (K3 + theta)) + lnphi
    n = ((K2 * K3) / (K3 + theta)) - lnphi

    return K3 * (z/n)
   

def remove_outlier(readings):
    if (len(readings) == 1):
        return readings[0]
    #count average temp, hum, temp abberation, hum abberation
    avg = [0, 0, 0, 0]
    for val in readings:
        avg[0] += val[0]
        avg[1] += val[1]
    avg[0] = avg[0]/len(readings)
    avg[1] = avg[1]/len(readings)
    if (len(readings) == 2):
        return avg
    #average abberation
    abberations = []
    for val in readings:
        abb = [abs(avg[0] - val[0]), abs(avg[1] - val[1])]
        abberations.append(abb)
        avg[2] += abb[0]
        avg[3] += abb[1]
    avg[2] = (avg[2]/len(readings))
    avg[3] = (avg[3]/len(readings))
    vals = 0
    avg[0] = 0
    avg[1] = 0
    for index,val in enumerate(readings):
        if (abberations[index][0] <= avg[2]) and (abberations[index][1] <= avg[3]):
            vals += 1
            avg[0] += val[0]
            avg[1] += val[1]
    avg[0] = avg[0]/vals
    avg[1] = avg[1]/vals
    return avg

def fetch_values(sensor_type, sensor_gpio):
    reader = dhtreader.init()
    values = None
    tries = 0
    good = 0
    readings = []
    while (good < average and tries < try_count):
        values = dhtreader.read(sensor_type, sensor_gpio)
        if values != None:
            readings.append(values)
            good += 1
        tries += 1
    
    results = remove_outlier(readings)
    
    temp = results[0]
    hum = results[1]
    dp = calc_dewpoint(temp, hum)
    print "temp.value %f" % temp
    print "hum.value %f" % hum
    print "dp.value %f" % dp


def main(args):
    if len(args) > 1:
        if args[1] in [ 'autoconf', 'detect' ]:
            try:
                fetch_raw()
                print "yes"
                return 0
            except:
                print "no"
                return 1
        elif args[1] == 'config':
            try:
                print_config()
            except Exception as e:
                print >>sys.stderr, "Failed to fetch config: '%s'" % e
                return 1
            return 0
    try:
        sensor_type = sys.argv[0].split('_', 2)[1]
        sensor_gpio = sys.argv[0].split('_', 2)[2]
        fetch_values(int(sensor_type) , int(sensor_gpio))
    except Exception as e:
        print >>sys.stderr, "Failed to fetch values: '%s'" % e
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
